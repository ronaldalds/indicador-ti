MESES = {
    1: 'Janeiro',
    2: 'Fevereiro',
    3: 'Março',
    4: 'Abril',
    5: 'Maio',
    6: 'Junho',
    7: 'Julho',
    8: 'Agosto',
    9: 'Setembro',
    10: 'Outubro',
    11: 'Novembro',
    12: 'Dezembro',
}

# Create your models here.
class Transbordo(models.Model):
    chamado = models.CharField(max_length=11, help_text="ex: 0923-000052")
    assunto = models.CharField(max_length=128)
    data_criacao = models.DateField()
    data_finalizacao = models.DateField()
    nome_sub_categoria = models.CharField(max_length=128)
    nome_categoria = models.CharField(max_length=128)
    nome_operador = models.CharField(max_length=128)


    status_acao_nome_relatorio = models.CharField(max_length=128)
    fantasia_fornecedor = models.CharField(max_length=128, null=True, blank=True)

    # Mês e Ano
    mes = models.CharField(max_length=128)
    ano = models.IntegerField()
    # ----------------------------------------------------------------

    def clean(self):
        chamado_pattern = r"^(0[1-9]|1[0-2])(\d{2})-\d{6}$"

        if not re.match(chamado_pattern, self.chamado):
            raise ValidationError("O chamado deve estar no formato '0923-000052'.")

    def save(self, *args, **kwargs):
        if self.chamado:
            self.mes = MESES[int(self.chamado[:2])]
            self.ano = int(self.chamado[2:4])
        super().save(*args, **kwargs)
    
    class Meta:
        verbose_name_plural = 'Transbordos'
    
    def __str__(self):
        return f"Transbordo - {self.chamado}"

class Fcr(models.Model):
    chamado = models.CharField(max_length=11, help_text="ex: 0923-000052")
    assunto = models.CharField(max_length=128)
    nome_sub_categoria = models.CharField(max_length=128)
    nome_operador = models.CharField(max_length=128)
    first_call = models.CharField(max_length=1)
    nome_categoria = models.CharField(max_length=128)

    # Mês e Ano
    mes = models.CharField(max_length=128)
    ano = models.IntegerField()
    # ----------------------------------------------------------------

    def clean(self):
        chamado_pattern = r"^(0[1-9]|1[0-2])(\d{2})-\d{6}$"

        if not re.match(chamado_pattern, self.chamado):
            raise ValidationError("O chamado deve estar no formato '0923-000052'.")

    def save(self, *args, **kwargs):
        if self.chamado:
            self.mes = MESES[int(self.chamado[:2])]
            self.ano = int(self.chamado[2:4])
        super().save(*args, **kwargs)
    
    class Meta:
        verbose_name_plural = 'FCRs'
    
    def __str__(self):
        return f"FCR - {self.chamado}"

class SlaSuport(models.Model):
    chamado = models.CharField(max_length=11, help_text="ex: 0923-000052")
    assunto = models.CharField(max_length=128)
    sla_1_expirado = models.CharField(max_length=128)
    sla_2_expirado = models.CharField(max_length=128)
    nome_categoria = models.CharField(max_length=128)

    # Mês e Ano
    mes = models.CharField(max_length=128)
    ano = models.IntegerField()
    # ----------------------------------------------------------------

    def clean(self):
        chamado_pattern = r"^(0[1-9]|1[0-2])(\d{2})-\d{6}$"

        if not re.match(chamado_pattern, self.chamado):
            raise ValidationError("O chamado deve estar no formato '0923-000052'.")

    def save(self, *args, **kwargs):
        if self.chamado:
            self.mes = MESES[int(self.chamado[:2])]
            self.ano = int(self.chamado[2:4])
        super().save(*args, **kwargs)
    
    class Meta:
        verbose_name_plural = 'SLAs Suporte'
    
    def __str__(self):
        return f"SLA Suporte - {self.chamado}"

class Tma(models.Model):
    chamado = models.CharField(max_length=11, help_text="ex: 0923-000052")
    assunto = models.CharField(max_length=128)
    nome_sub_categoria = models.CharField(max_length=128)
    nome_operador = models.CharField(max_length=128)
    nome_sla_2_status = models.CharField(max_length=128, null=True, blank=True)
    nome_categoria = models.CharField(max_length=128)

    # Total horas primeiro segundo atendimento
    total_horas_1_2_atendimento_str = models.CharField(max_length=9, help_text="ex: 000:04:00")
    total_horas_1_2_atendimento = models.DurationField()
    # ----------------------------------------------------------------

    # Mês e Ano
    mes = models.CharField(max_length=128)
    ano = models.IntegerField()
    # ----------------------------------------------------------------

    def clean(self):
        chamado_pattern = r"^(0[1-9]|1[0-2])(\d{2})-\d{6}$"
        total_horas_1_2_atendimento_pattern = re.compile(r'^\d+:\d{1,2}:\d{2}$')
        print("a")

        if not re.match(chamado_pattern, self.chamado):
            raise ValidationError("O chamado deve estar no formato '0923-000052'.")
        
        if not re.match(total_horas_1_2_atendimento_pattern, self.total_horas_1_2_atendimento_str):
            raise ValidationError("A total horas primeiro segundo atendimento deve estar no formato 'HH:MM:SS'.")
    
    def save(self, *args, **kwargs):
        if self.chamado:
            self.mes = MESES[int(self.chamado[:2])]
            self.ano = int(self.chamado[2:4])

        if self.total_horas_1_2_atendimento_str:
            horas, minutos, segundos = map(int, self.total_horas_1_2_atendimento_str.split(':'))
            self.total_horas_1_2_atendimento = timedelta(hours=horas, minutes=minutos, seconds=segundos)
            
        super().save(*args, **kwargs)
    
    class Meta:
        verbose_name_plural = 'TMAs'
    
    def __str__(self):
        return f"TMA - {self.chamado}"

class Mttr(models.Model):
    chamado = models.CharField(max_length=11, help_text="ex: 0923-000052")
    assunto = models.CharField(max_length=128)
    data_criacao = models.DateField()
    nome_status = models.CharField(max_length=128)
    grupo_auto_categoria_nome = models.CharField(max_length=128)
    nome_categoria = models.CharField(max_length=128)
    nome_operador = models.CharField(max_length=128)

    Total horas chamado
    total_horas_chamado_str = models.CharField(max_length=9, help_text="ex: 000:04:00")
    total_horas_chamado = models.DurationField()
    # ----------------------------------------------------------------

    # Total horas primeiro segundo atendimento
    total_horas_1_2_atendimento_str = models.CharField(max_length=9, help_text="ex: 000:04:00")
    total_horas_1_2_atendimento = models.DurationField()
    # ----------------------------------------------------------------

    # Mês e Ano
    mes = models.CharField(max_length=128)
    ano = models.IntegerField()
    # ----------------------------------------------------------------

    def clean(self):
        chamado_pattern = r"^(0[1-9]|1[0-2])(\d{2})-\d{6}$"
        total_horas_chamado_pattern = re.compile(r'^\d+:\d{1,2}:\d{2}$')
        total_horas_1_2_atendimento_pattern = re.compile(r'^\d+:\d{1,2}:\d{2}$')
        print("a")

        if not re.match(chamado_pattern, self.chamado):
            raise ValidationError("O chamado deve estar no formato '0923-000052'.")
        
        if not re.match(total_horas_chamado_pattern, self.total_horas_chamado_str):
            raise ValidationError("A total horas chamado deve estar no formato 'HH:MM:SS'.")
        
        if not re.match(total_horas_1_2_atendimento_pattern, self.total_horas_1_2_atendimento_str):
            raise ValidationError("A total horas primeiro segundo atendimento deve estar no formato 'HH:MM:SS'.")

    def save(self, *args, **kwargs):
        if self.chamado:
            self.mes = MESES[int(self.chamado[:2])]
            self.ano = int(self.chamado[2:4])

        if self.total_horas_chamado_str:
            horas, minutos, segundos = map(int, self.total_horas_chamado_str.split(':'))
            self.total_horas_chamado = timedelta(hours=horas, minutes=minutos, seconds=segundos)

        if self.total_horas_1_2_atendimento_str:
            horas, minutos, segundos = map(int, self.total_horas_1_2_atendimento_str.split(':'))
            self.total_horas_1_2_atendimento = timedelta(hours=horas, minutes=minutos, seconds=segundos)

        super().save(*args, **kwargs)
    
    class Meta:
        verbose_name_plural = 'MTTRs'
    
    def __str__(self):
        return f"MTTR - {self.chamado}"

class SlaSistema(models.Model):
    chamado = models.CharField(max_length=11, help_text="ex: 0923-000052")
    assunto = models.CharField(max_length=128)
    data_criacao = models.DateField()
    nome_sla_status_atual = models.CharField(max_length=128, null=True, blank=True)
    Mês e Ano
    mes = models.CharField(max_length=128)
    ano = models.IntegerField()
    # ----------------------------------------------------------------

    def clean(self):
        chamado_pattern = r"^(0[1-9]|1[0-2])(\d{2})-\d{6}$"

        if not re.match(chamado_pattern, self.chamado):
            raise ValidationError("O chamado deve estar no formato '0923-000052'.")
        
    def save(self, *args, **kwargs):
        if self.chamado:
            self.mes = MESES[int(self.chamado[:2])]
            self.ano = int(self.chamado[2:4])
        super().save(*args, **kwargs)
    
    class Meta:
        verbose_name_plural = 'SLAs Sistema'
    
    def __str__(self):
        return f"SLA Sistema - {self.chamado}"
    